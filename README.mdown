# Norm
Norm is a MarkLogic Denormalisation helper library. A Denormalisation in MarkLogic allows you to alter the structure of multiple incoming documents and create composite documents 
to act as the results of a search application. Scenarios supported include:-

- Shredding one incoming document in to several document (Also useful for creating documents to act as fragments for ODBC views)
- Combining multiple related documents in to a single aggregate document (E.g. from Relational documents for an Order, Order items, delivery address in to a single OrderDetails document)

## Installation
Currently there is no UI. To install to a target content database:-

- Copy /src/app/models/lib-norm.xqy to your modules database at /app/models/lib-norm.xqy
- Added the trigger /src/app/models/trigger-norm-create.xqy at the same folder location in the modules database
- Enabled this trigger on one or more incoming document collections, or globally (there are internal checks to ensure it works globally)
- Add a denormalisation configuration to the 'norm-config' collection. See files in the samples folder for examples

If you just want to test Norm from QConsole against a test database then you can instead use the embedded Roxy app to deploy a new DB and app server:-

- Edit /src/app/config/config.xqy and check the username, password, and port numbers in use. Edit as necessary.
- From a terminal in the main norm directory execute ./ml local bootstrap followed by ./ml local deploy modules
- From a QConsole attached to the new norm-content database, open the QConsole file in norm.xml in the main norm directory. This shows working examples and useful scripts.
- Load in sample content using the scripts in data/*.xml (These are actually XQuery files that load the data with the correct collections and URIs) 

## Requirements
* MarkLogic 6.0 or above
* [Ruby](http://www.ruby-lang.org/en/) - Required for Roxy Deployer only.
* [Java (jdk)](http://www.oracle.com/technetwork/java/javase/downloads/index.html) - Only if you wish to run the Roxy Deployer [XQSync](http://developer.marklogic.com/code/xqsync, XQSync) or [RecordLoader](http://developer.marklogic.com/code/recordloader) commands.

## Getting Help
Email me at adam.fowler@marklogic.com

## Common gotchas
In order to execute the code requires particular indexes. Once you've created a denormalisation configuration execute the list indexes function for your configuration. An example of this
is in the norm.xml QConsole file. Load this in to QConsole via Import Workspace to see a sample.

## Supported features
- Create or Update of a document generates a denormalisation
- Single primary key per source in new document (not multiple primary keys yet)
- Cases where multiple existing documents of each source (type) require generation of multiple denormalisation documents, including many multiples across all sources
- Optional parent document (see config-direct-parent.xqy)
- Denormalisation from both parent and child documents (see config-direct-parent.xqy)
- Shredding single document (for ODBC view resolution) (see config-odbc-shred.xqy)
? Shredding one document whilst merging with another document (TODO test)
- Handles static content, text, or elements (see config-odbc-shred.xqy)

## Upcoming / not yet 
- Checking if generated content will be the same as content that already exists (thus reducing any other triggers firing)
- Being part of a pipeline in CPF
- Composite primary keys in the document that generates the denormalisation
- XSLT generation of new denormalisation documents
- Embedded XQuery / document by example templating (must be in internal format only)
- Only supports single primary key per source being referenced in the denormalisation's URI
? SOptional grandparent documents (and thus any ancestor docs)
 - Cannot resolve documents as there is a dependancy on resolving parent first - will require a processing order on the XML sources themselves. Should be able to determine at runtime based on dependency tree
